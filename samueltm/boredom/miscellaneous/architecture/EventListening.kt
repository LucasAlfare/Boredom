/**
 * This file contains a basic code to perform implementations over the
 * observer/event-driven pattern.
 *
 * @author Francisco Lucas, 21/07/2021
 */
package samueltm.boredom.miscellaneous.architecture


/**
 * Basic data to hold info about a event.
 *
 * Every event basically carries a label (name; identifier) and some data.
 *
 * The related data can or don't hold some values, indicating a "void" event,
 * normally used only to tell the applications that something just happened.
 */
data class EventInfo(val label: String, val data: Any? = null)


/**
 * Interface tha makes any of his implementations receive events infos through
 * the param.
 */
interface EventListener {
    /**
     * Function that carries info about events fired by the listenable classes.
     *
     * Those classes can take information in the format of a EventInfo and propagates
     * for EventListeners using this function.
     */
    fun onEvent(eventInfo: EventInfo)
}


/**
 * Base class for all other classes that wants to generates/fires event infos for
 * those who are interested.
 *
 * Any structure that whats to be notified about events of implementations from this
 * class must to be inserted using the @addListener function.
 */
open class Listenable {

    /**
     * List containing all interested instances in events generated by this class.
     */
    private val listeners = arrayListOf<EventListener>()

    /**
     * Inserts a implementation of EventListener to listen to events.
     */
    fun addListener(listener: EventListener) {
        if (!listeners.contains(listener)) listeners += listener
    }

    /**
     * Removes a existing instance from this listenable class.
     */
    fun removeListener(listener: EventListener) {
        listeners -= listener
    }

    /**
     * Function used to propagate events over all added listeners.
     */
    fun notifyListeners(eventInfo: EventInfo) {
        listeners.forEach { it.onEvent(eventInfo) }
    }
}
